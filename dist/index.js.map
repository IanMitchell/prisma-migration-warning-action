{"version":3,"file":"index.js","sources":["../webpack://prisma-migration-warning-action/./lib/main.js","../webpack://prisma-migration-warning-action/webpack/runtime/compat","../webpack://prisma-migration-warning-action/webpack/startup"],"sourcesContent":["var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\ndefine([\"require\", \"exports\", \"node:fs\", \"@actions/core\", \"@octokit/action\", \"zx\"], function (require, exports, node_fs_1, core, action_1, zx_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    node_fs_1 = __importDefault(node_fs_1);\n    core = __importStar(core);\n    const octokit = new action_1.Octokit();\n    const [OWNER, REPOSITORY] = process.env.GITHUB_REPOSITORY.split(\"/\");\n    function getPullRequestId() {\n        const ev = JSON.parse(node_fs_1.default.readFileSync(process.env.GITHUB_EVENT_PATH, \"utf8\"));\n        console.log(ev);\n        return ev.pull_request.number;\n    }\n    async function getSchemaRemovalCount(mainBranch, path) {\n        const { stdout } = await (0, zx_1.$) `git diff $(git log -n 1 origin/${mainBranch} --pretty=format:\"%H\") $(git log -n 1 --pretty=format:\"%H\") --numstat ${path}/prisma.schema | awk '{ print $2}'`;\n        return parseInt(stdout.trim(), 10);\n    }\n    async function getModifiedFileCount(mainBranch, path) {\n        const { stdout } = await (0, zx_1.$) `git diff $(git log -n 1 origin/${mainBranch} --pretty=format:\"%H\") $(git log -n 1 --pretty=format:\"%H\") --numstat -- . :^${path} | wc -l`;\n        return parseInt(stdout.trim(), 10);\n    }\n    async function run() {\n        try {\n            const mainBranch = core.getInput(\"main-branch\");\n            const path = core.getInput(\"path\");\n            const schemaRemovalCount = await getSchemaRemovalCount(mainBranch, path);\n            console.log(`Detected ${schemaRemovalCount} lines removed`);\n            const modifiedFileCount = await getModifiedFileCount(mainBranch, path);\n            console.log(`Detected ${modifiedFileCount} modified files`);\n            if (schemaRemovalCount > 0 && modifiedFileCount > 0) {\n                const warning = core.getBooleanInput(\"warning\");\n                const fail = core.getBooleanInput(\"fail\");\n                const repeat = core.getBooleanInput(\"repeat\");\n                const message = core.getInput(\"message\");\n                console.log(`Options: Warning [${warning}], Fail [${fail}], Repeat [${repeat}]`);\n                console.log(`Message: \\n${message}`);\n                if (warning) {\n                    const id = getPullRequestId();\n                    const comments = await octokit.issues.listComments({\n                        owner: OWNER,\n                        repo: REPOSITORY,\n                        issue_number: id,\n                    });\n                    const isWarningPosted = comments.data.some((comment) => comment.body === message);\n                    if (!isWarningPosted || (isWarningPosted && repeat)) {\n                        octokit.issues.createComment({\n                            owner: OWNER,\n                            repo: REPOSITORY,\n                            issue_number: id,\n                            body: message,\n                        });\n                    }\n                }\n                if (fail) {\n                    core.setFailed(\"Potentially unsafe Prisma migration detected. Please separate migration changes into their own Pull Request.\");\n                }\n            }\n            core.info(`No potentially unsafe Prisma migration detected.`);\n        }\n        catch (error) {\n            if (error instanceof Error)\n                core.setFailed(error.message);\n        }\n    }\n    run();\n});\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[109]();\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;ACtFA;AACA;;;;ACDA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}